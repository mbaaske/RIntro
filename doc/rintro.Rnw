% 
\documentclass[10pt]{beamer} 
\mode<presentation>{%
	\setbeamertemplate{section in toc}[sections numbered]%
	\setbeamertemplate{subsection in toc}[subsections numbered] 
}
\usepackage[T1]{fontenc} 	  % Fontencoding

\usepackage{Sweave}
\SweaveOpts{keep.source=TRUE}
\SweaveOpts{engine=R,eps=FALSE}
\usepackage[utf8]{inputenc}

% R -----------------------------------------------
\let\proglang=\textsf
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}

\title{\proglang{R} Basics and Examples - A short introduction}
\author{Markus Baaske}
\institute{Faculty of Mathematics and Computer Science (FSU Jena)}

\begin{document}

\maketitle

\begin{frame}{The R Project for Statistical Computing}
The \proglang{R} project \url{http://www.r-project.org} develops a free
software environment for statistical computing and graphics. \proglang{R}
compiles and runs on a wide variety of UNIX platforms, Windows and MacOS, is mostly used for statistics but can also be
used as a programming (script) language alone. \par
\proglang{R} is organized as a core distribution of base packages which can be
extended by further packages loaded into the a user workspace (or interpreter
global environment). Some useful links are
\begin{itemize}
  \item Tutorials on using \proglang{R} can be
  found at \url{http://www.r-tutor.com/}
  \item Meta search and package
  documentation \url{https://www.rdocumentation.org/}
  \item \proglang{R} CRAN repository for contributed packages:
  \url{https://cran.r-project.org/}
  \item A short reference card \url{https://cran.r-project.org/doc/contrib/Short-refcard.pdf}
\end{itemize}
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} Basics}
<<echo=FALSE>>=
rm(list=ls())
options(useFancyQuotes="UTF-8")
options(digits=4, prompt="R> ")
@
<<>>=
PATH <- getwd()        # get working directory
INFO <- Sys.info()     # get system info  
objects()              # show all loaded variables
ls()                   # objects in your workspace
@
Whats is in these objects?
<<>>=
PATH
INFO[c("sysname","nodename","user")]
@
\textbf{Important:} On quitting, R offers the option of saving the workspace
image, by default in the file "*.RData". Use before ending the R session:
<<eval=FALSE>>=
rm(list=ls())
q()
@
\end{frame}
%

\begin{frame}[fragile]{\proglang{R} Help and vectors}
Getting help:
<<eval=FALSE>>=
help()              # general help
?length             # help for `length`
help.search(lapply) # help for function `lapply`
help.start()        # start html help system
@
Vectors:
<<>>=
2+2
round(pi,3)
sqrt(10)
1000*(1+0.075)^5-1000
sin(c(30,60,90)*pi/180) 
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} variables and subsetting}
<<>>=
a <- 2*3
a
a^2
b <- a^2
a <- c(17,1,3,9)
a
a[2]
a[c(1,3)]
a[-2]
a[2] <- 1
a
@
\end{frame}
%
\begin{frame}[fragile]{Characters and categories}
<<>>=
(x <- "Hallo")                     # character vector
(y <- factor(c("C","A","C","B")))  # characters as categories
(z <- factor(c(1,1,2)))            # numbers as factors
(x <- c(1,2,3))                    # distroy x and overwrite
x[4]                               # NA = Not Available
try(x[4])                          # catch error
@
\end{frame}

\begin{frame}[fragile]{\proglang{R} object classes}
<<>>=
class(1.7) # "numeric"
class(x)   # "character" = character vector
class(y)   # "factor" categories
class(z)
mode(1.7)
x <- as.integer(x)
class(x)
z <- as.character(z)
class(z)
@
\end{frame}
%
\begin{frame}[fragile]{Characters and categories}
<<eval=FALSE>>=
# Save contents of workspace, into the file .RData
save.image()
# Save into the file archive.RData
save.image(file="archive.RData")
# save single objects
save(x, y,z, file="tmpobj.RData")
# save as RDS (could be big data)
saveRDS(list(x,y,z),file="myfile.rds")
# read as RDS
XYZ <- readRDS(file="myfile.rds")
@
<<>>=
# attach (reload) to current workspace
attach("tmpobj.RData")
ls()
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} vector repetitions}
<<>>=
# vectors and repeating components
10:5
-1:2
# a sequence
seq(5,10)
seq(5,10,by=0.1)
# repeat
rep(1:3,times=3)
rep(1:3,each=3)
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} vector repetitions}
<<>>=
# replicate
x <- 1:5
y <- 3:1
# multiply elements
x*y
(M <- matrix(sample(1:10),nr=5))
as.numeric(M%*%c(2,2))
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} data frame object}
<<eval=FALSE>>=
?data.frame    # help on data frames
example(data.frame)   # some examples
@
Construct a data frame of study courses
<<>>=
g <- data.frame(StG=c("GTB","MPV","BGM"),Anz=c(75,11,62))
g
class(g)   # "data.frame" = Datenmatrix
names(g)   # categories in g
g[,2]	   # 2nd column
g[3,]	   # 3rd row
g[3,2]	   # single element
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} data frame object}
<<>>=
g[c(2,3),] # select 2nd and 3rd row
g$Anz      # select category `Anz`
g$Anz[1]   # select first element of `Anz`
# Extending the  data frame
(g <- rbind(g,c("GTB",26)))
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} data frame object}
<<>>=
# add category
(g <- cbind(g,Sem=c(3,1,3,5)))
# add factor level
(g <- rbind(g,data.frame(StG=factor("BGOK"),Anz=57,Sem=3)))
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} statistics}
<<>>=
runif(n=10) # uniform on [0,1]
rnorm(n=20,mean=5,sd=2)  # normal distribution
rnorm(n=20)   # standard normal (mean=0, sd=1)       
rpois(n=20,lambda=5) # Poisson with parameter lambda
rexp(n=20,rate=5) # exponential distribution
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} statistical characteristics}
<<>>=
x <- runif(100)
min(x)    # Minimum
max(x)    # Maximum
mean(x)   # Mean
median(x) # Median
var(x)    # variance
sd(x)	  # standard deviation/error
summary(x) # overview
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} loops}
<<>>=
for(i in 7:9) {print(i)}
x <- 0
while(x < 3){print(x); x <- x+1}
fun <- function(x) x^2
fun(2.3)
@
Logical ifs
<<>>=
x <- sample(1:10,size=1)
if(x < 5) {print("Yeah!")} else {print("Oh, noo!")}
print(x)
@
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} Practice}
\begin{enumerate}
 \item Generate standard normal random variables, check characteristics and use
 different sample sizes!
 \item Construct a numeric vector and sort this in ascending order using
 function \textit{sort()}.
 \item Delete first row of data frame `g`. Add some new category. Change number
 of students `Anz` in in `MPV`.
 \item Load data set \textit{airquality}:
<<eval=FALSE>>=
data(airquality)
head(airquality)
@ 
Check for `NAs` and omit these by functions \textit{is.na()} and
\textit{na.omit()} What is it about? Write a function
 which calculates the means and standard deviations of categories `Ozone`,`Solar.R`, `Wind` and `Temp` from data set
 \textit{airquality} for each month separately. THe function returns a matrix of
 dimensions $5\times 2$ where the first columnstores the means and the second
 the standard errors of all month.
\end{enumerate}
\end{frame}
%
\begin{frame}[fragile]{\proglang{R} Practice - solutions}
\begin{enumerate}
 \item 
<<>>=
  gg <- rnorm(n=100)
  s <- sample(gg,size=20)
  summary(gg)
  summary(s)
@
 \item
<<>>=
# sort log normal random variables
x <- rlnorm(10,0,1)
sort(x)
@
 \item
<<>>=
z <- g[-1,]
z <- cbind(z,Sex=c(10,12))
z$Anz[1] <- 20
z <- rbind(z,data.frame(StG=factor("BGOK"),Anz=57,Sex=3))
@
 \item
<<>>=
@
\end{enumerate}
\end{frame}


\end{document}
